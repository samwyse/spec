{"__ATTN__": "Do not edit this file; changes belong in the appropriate YAML file.", "depends_on": ["inverted"], "overview": "Lambdas are a special-cased data type for use in interpolations and\nsections.\n\nWhen used as the data value for an Interpolation tag, the lambda MUST be\ntreatable as an arity 0 function, and invoked as such.  The returned value\nMUST be rendered against the default delimiters, then interpolated in place\nof the lambda.\n\nWhen used as the data value for a Section tag, the lambda MUST be treatable\nas an arity 1 function, and invoked as such (passing a String containing the\nunprocessed section contents).  The returned value MUST be rendered against\nthe current delimiters, then interpolated in place of the section.\n", "tests": [{"data": {"lambda": {"__tag__": "code", "clojure": "(fn [] \"world\")", "js": "function() { return \"world\" }", "perl": "sub { \"world\" }", "php": "return \"world\";", "python": "lambda: \"world\"", "ruby": "proc { \"world\" }"}}, "desc": "A lambda's return value should be interpolated.", "expected": "Hello, world!", "name": "Interpolation", "template": "Hello, {{lambda}}!"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [] \"{{planet}}\")", "js": "function() { return \"{{planet}}\" }", "perl": "sub { \"{{planet}}\" }", "php": "return \"{{planet}}\";", "python": "lambda: \"{{planet}}\"", "ruby": "proc { \"{{planet}}\" }"}, "planet": "world"}, "desc": "A lambda's return value should be parsed.", "expected": "Hello, world!", "name": "Interpolation - Expansion", "template": "Hello, {{lambda}}!"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [] \"|planet| => {{planet}}\")", "js": "function() { return \"|planet| => {{planet}}\" }", "perl": "sub { \"|planet| => {{planet}}\" }", "php": "return \"|planet| => {{planet}}\";", "python": "lambda: \"|planet| => {{planet}}\"", "ruby": "proc { \"|planet| => {{planet}}\" }"}, "planet": "world"}, "desc": "A lambda's return value should parse with the default delimiters.", "expected": "Hello, (|planet| => world)!", "name": "Interpolation - Alternate Delimiters", "template": "{{= | | =}}\nHello, (|&lambda|)!"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(def g (atom 0)) (fn [] (swap! g inc))", "js": "function() { return (g=(function(){return this})()).calls=(g.calls||0)+1 }", "perl": "sub { no strict; $calls += 1 }", "php": "global $calls; return ++$calls;", "python": "lambda: globals().update(calls=globals().get(\"calls\",0)+1) or calls", "ruby": "proc { $calls ||= 0; $calls += 1 }"}}, "desc": "Interpolated lambdas should not be cached.", "expected": "1 == 2 == 3", "name": "Interpolation - Multiple Calls", "template": "{{lambda}} == {{{lambda}}} == {{lambda}}"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [] \">\")", "js": "function() { return \">\" }", "perl": "sub { \">\" }", "php": "return \">\";", "python": "lambda: \">\"", "ruby": "proc { \">\" }"}}, "desc": "Lambda results should be appropriately escaped.", "expected": "<&gt;>", "name": "Escaping", "template": "<{{lambda}}{{{lambda}}}"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [text] (if (= text \"{{x}}\") \"yes\" \"no\"))", "js": "function(txt) { return (txt == \"{{x}}\" ? \"yes\" : \"no\") }", "perl": "sub { $_[0] eq \"{{x}}\" ? \"yes\" : \"no\" }", "php": "return ($text == \"{{x}}\") ? \"yes\" : \"no\";", "python": "lambda text: text == \"{{x}}\" and \"yes\" or \"no\"", "ruby": "proc { |text| text == \"{{x}}\" ? \"yes\" : \"no\" }"}, "x": "Error!"}, "desc": "Lambdas used for sections should receive the raw section string.", "expected": "<yes>", "name": "Section", "template": "<{{#lambda}}{{x}}{{/lambda}}>"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [text] (str text \"{{planet}}\" text))", "js": "function(txt) { return txt + \"{{planet}}\" + txt }", "perl": "sub { $_[0] . \"{{planet}}\" . $_[0] }", "php": "return $text . \"{{planet}}\" . $text;", "python": "lambda text: \"%s{{planet}}%s\" % (text, text)", "ruby": "proc { |text| \"#{text}{{planet}}#{text}\" }"}, "planet": "Earth"}, "desc": "Lambdas used for sections should have their results parsed.", "expected": "<-Earth->", "name": "Section - Expansion", "template": "<{{#lambda}}-{{/lambda}}>"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [text] (str text \"{{planet}} => |planet|\" text))", "js": "function(txt) { return txt + \"{{planet}} => |planet|\" + txt }", "perl": "sub { $_[0] . \"{{planet}} => |planet|\" . $_[0] }", "php": "return $text . \"{{planet}} => |planet|\" . $text;", "python": "lambda text: \"%s{{planet}} => |planet|%s\" % (text, text)", "ruby": "proc { |text| \"#{text}{{planet}} => |planet|#{text}\" }"}, "planet": "Earth"}, "desc": "Lambdas used for sections should parse with the current delimiters.", "expected": "<-{{planet}} => Earth->", "name": "Section - Alternate Delimiters", "template": "{{= | | =}}<|#lambda|-|/lambda|>"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [text] (str \"__\" text \"__\"))", "js": "function(txt) { return \"__\" + txt + \"__\" }", "perl": "sub { \"__\" . $_[0] . \"__\" }", "php": "return \"__\" . $text . \"__\";", "python": "lambda text: \"__%s__\" % (text)", "ruby": "proc { |text| \"__#{text}__\" }"}}, "desc": "Lambdas used for sections should not be cached.", "expected": "__FILE__ != __LINE__", "name": "Section - Multiple Calls", "template": "{{#lambda}}FILE{{/lambda}} != {{#lambda}}LINE{{/lambda}}"}, {"data": {"lambda": {"__tag__": "code", "clojure": "(fn [text] false)", "js": "function(txt) { return false }", "perl": "sub { 0 }", "php": "return false;", "python": "lambda text: 0", "ruby": "proc { |text| false }"}, "static": "static"}, "desc": "Lambdas used for inverted sections should be considered truthy.", "expected": "<>", "name": "Inverted Section", "template": "<{{^lambda}}{{static}}{{/lambda}}>"}]}